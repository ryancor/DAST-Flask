{'TMP': 'C:\\Users\\ryancor\\AppData\\Local\\Temp', 'COMPUTERNAME': 'LAPTOP-QH019438', 'VS140COMNTOOLS': 'C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\Common7\\Tools\\', 'USERDOMAIN': 'LAPTOP-QH019438', 'GOOGLE_API_KEY': 'AIzaSyAQfxPJiounkhOjODEO5ZieffeBv6yft2Q', 'TERM_PROGRAM_VERSION': '1.19.1', 'COMMONPROGRAMFILES': 'C:\\Program Files\\Common Files', 'PROCESSOR_IDENTIFIER': 'Intel64 Family 6 Model 94 Stepping 3, GenuineIntel', 'VBOX_MSI_INSTALL_PATH': 'C:\\Program Files\\Oracle\\VirtualBox\\', 'PROGRAMFILES': 'C:\\Program Files', 'PROCESSOR_REVISION': '5e03', 'PATH': 'c:\\mingw\\bin;C:\\ProgramData\\Oracle\\Java\\javapath;C:\\Python36\\Scripts\\;C:\\Python36\\;C:\\Program Files (x86)\\Intel\\iCLS Client\\;C:\\Program Files\\Intel\\iCLS Client\\;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files (x86)\\NVIDIA Corporation\\PhysX\\Common;C:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\DAL;C:\\Program Files\\Intel\\Intel(R) Management Engine Components\\DAL;C:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\IPT;C:\\Program Files\\Intel\\Intel(R) Management Engine Components\\IPT;C:\\Program Files\\Intel\\WiFi\\bin\\;C:\\Program Files\\Common Files\\Intel\\WirelessCommon\\;C:\\ProgramData\\chocolatey\\bin;C:\\Program Files\\Git\\cmd;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files\\Java\\jdk1.8.0_144\\bin;C:\\Program Files\\dotnet\\;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\WINDOWS\\System32\\OpenSSH\\;C:\\Program Files (x86)\\PuTTY\\;C:\\Ruby24\\bin;C:\\Ruby22\\bin;C:\\Program Files (x86)\\Nmap;C:\\Users\\ryancor\\AppData\\Local\\Microsoft\\WindowsApps;C:\\ProgramData\\chocolatey\\lib\\msys2;C:\\tools\\mysql\\current\\bin;C:\\Users\\ryancor\\AppData\\Local\\atom\\bin;C:\\Users\\ryancor\\AppData\\Local\\Microsoft\\WindowsApps;;C:\\Program Files\\Microsoft VS Code\\bin', 'SYSTEMROOT': 'C:\\WINDOWS', 'VSCODE_IPC_HOOK': '\\\\.\\pipe\\4481a75b12c0108a495b492003c0dc69-1.19.1-main-sock', 'PROGRAMFILES(X86)': 'C:\\Program Files (x86)', 'TERM_PROGRAM': 'vscode', 'DRIVERDATA': 'C:\\Windows\\System32\\Drivers\\DriverData', 'TEMP': 'C:\\Users\\ryancor\\AppData\\Local\\Temp', 'COMMONPROGRAMFILES(X86)': 'C:\\Program Files (x86)\\Common Files', 'VSCODE_CWD': 'C:\\Program Files\\Microsoft VS Code', 'PROCESSOR_ARCHITECTURE': 'AMD64', 'CHOCOLATEYINSTALL': 'C:\\ProgramData\\chocolatey', 'CHOCOLATEYLASTPATHUPDATE': 'Fri Sep 22 12:51:08 2017', 'ALLUSERSPROFILE': 'C:\\ProgramData', 'LOCALAPPDATA': 'C:\\Users\\ryancor\\AppData\\Local', 'FPS_BROWSER_USER_PROFILE_STRING': 'Default', 'HOMEPATH': '\\Users\\ryancor', 'USERDOMAIN_ROAMINGPROFILE': 'LAPTOP-QH019438', 'JAVA_HOME': 'C:\\Program Files\\Java\\jdk1.8.0_144', 'PROGRAMW6432': 'C:\\Program Files', 'USERNAME': 'ryancor', 'LANG': 'en_US.UTF-8', 'LOGONSERVER': '\\\\LAPTOP-QH019438', 'SESSIONNAME': 'Console', 'PROGRAMDATA': 'C:\\ProgramData', 'VISUALGDB_DIR': 'C:\\Program Files (x86)\\Sysprogs\\VisualGDB\\', 'CLASSPATH': '.;', 'CHOCOLATEYTOOLSLOCATION': 'C:\\tools', 'ONEDRIVE': 'C:\\Users\\ryancor\\OneDrive', 'FPS_BROWSER_APP_PROFILE_STRING': 'Internet Explorer', 'PATHEXT': '.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC;.PY;.PYW;.RB;.RBW;.CPL', 'VSCODE_NODE_CACHED_DATA_DIR_9992': 'C:\\Users\\ryancor\\AppData\\Roaming\\Code\\CachedData\\0759f77bb8d86658bc935a10a64f6182c5a1eeba', 'WINDIR': 'C:\\WINDOWS', 'VSCODE_PID': '9992', 'APPDATA': 'C:\\Users\\ryancor\\AppData\\Roaming', 'HOMEDRIVE': 'C:', 'SYSTEMDRIVE': 'C:', 'COMSPEC': 'C:\\WINDOWS\\system32\\cmd.exe', 'NUMBER_OF_PROCESSORS': '8', 'PSMODULEPATH': 'C:\\Users\\ryancor\\Documents\\WindowsPowerShell\\Modules;C:\\Program Files\\WindowsPowerShell\\Modules;C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules', 'PROCESSOR_LEVEL': '6', 'VSCODE_NLS_CONFIG': '{"locale":"en-us","availableLanguages":{}}', 'COMMONPROGRAMW6432': 'C:\\Program Files\\Common Files', 'OS': 'Windows_NT', 'PUBLIC': 'C:\\Users\\Public', 'USERPROFILE': 'C:\\Users\\ryancor'}